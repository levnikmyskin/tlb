#!/bin/sh
# tlb-func-stat - tlb-stat Helper Functions
#
# Copyright (c) 2023 Alessio Molinari <levnikmyskin at github.com> and others.
# SPDX-License-Identifier: GPL-2.0-or-later

# Needs: tlb-func-base, 15-tlb-func-disk, 35-tlb-func-batt

# ----------------------------------------------------------------------------
# Constants

readonly INITCTL=initctl
readonly SESTATUS=sestatus
readonly SMARTCTL=smartctl

readonly RE_AC_QUIRK='^UNDEFINED$'
readonly RE_ATA_ERROR='ata[0-9]+: SError: {.*CommWake }'

# ----------------------------------------------------------------------------
# Functions

# --- Checks

check_upstart () {
    # check if upstart is active init system (PID 1)
    # rc: 0=yes, 1=no
    cmd_exists $INITCTL && $INITCTL --version | grep -q upstart
}

check_openrc () {
    # check if openrc is the active init system (PID 1)
    # rc: 0=yes, 1=no
    [ -e /run/openrc/softlevel ]
}

check_ac_quirk () { # check for hardware known not to expose AC device
                    # $1: model string; rc: 0=yes, 1=no
    printf '%s' "$1" | grep -E -q "${RE_AC_QUIRK}"
}

# --- Formatted Output

printparm () {
    # formatted output of sysfile - general
    # $1: format, $2: sysfile, $3: n/a message, $4: cutoff
    local format="$1"
    local sysf="$2"
    local namsg="$3"
    local cutoff="$4"
    local val=""

    if val=$(read_sysf "$sysf"); then
        # sysfile read successful
        if [ -n "$cutoff" ]; then
            val=${val%"$cutoff"}
        fi
    fi

    if [ -z "$val" ]; then
        # replace empty value with n/a text
        if [ -n "$namsg" ]; then
            if [ "$namsg" != "_" ]; then
                # use specific n/a text
                format=$(echo "$format" | sed -r -e "s/##(.*)##/($namsg)/" -e "s/\[.*\]//")
            else
                # _ = skip
                sysf=""
            fi
        else
            # empty n/a text, use default text
            format=$(echo "$format" | sed -r -e "s/##(.*)##/(not available)/" -e "s/\[.*\]//")
        fi
        # output n/a text or skip
        # shellcheck disable=SC2059
        [ -n "$sysf" ] && printf "$format\n" "$sysf"
    else
        # non empty value: strip delimiters from format str
        format=$(echo "$format" | sed -r "s/##(.*)##/\1/")
        # shellcheck disable=SC2059
        printf "$format\n" "$sysf" "$val"
    fi

    return 0
}

print_sysf () {
    # formatted output of a sysfile
    # $1: format; $2: sysfile
    local val

    if val=$(read_sysf "$2"); then
        # sysfile readable
        # shellcheck disable=SC2059
        printf "$1" "$val"
    else
        # sysfile not readable
        # shellcheck disable=SC2059
        printf "$1" "(not available)"
    fi

    return 0
}

print_sysf_trim () {
    # formatted output of a sysfile, trim leading and trailing
    # blanks -- $1: format; $2: sysfile
    local val

    if val=$(read_sysf "$2"); then
         # sysfile readable
        # shellcheck disable=SC2059
        printf "$1" "$(printf "%s" "$val" | sed -r 's/^[[:blank:]]*//;s/[[:blank:]]*$//')"
    else
        # sysfile not readable
        # shellcheck disable=SC2059
        printf "$1" "(not available)"
    fi

    return 0
}

print_file_modtime_and_age () {
    # show a file's last modification time
    #  and age in secs -- $1: file
    local mtime age

    if [ -f "$1" ]; then
        mtime=$(date +%X -r "$1")
        age=$(( $(date +%s) - $(date +%s -r "$1") ))
        printf '%s, %d sec(s) ago' "$mtime" "$age"
    else
        printf "unknown"
    fi
}

print_selinux () {
    # print SELinux status and mode
    if cmd_exists $SESTATUS; then
        $SESTATUS | awk -F '[ \t\n]+' '/SELinux status:/ { printf "SELinux status = %s", $3 } ; \
                                       /Current mode:/   { printf " (%s)", $3 }'
        printf "\n"
    fi
}

# --- Battery

print_methods_per_driver () {
    # show features provided by a Thinkpad battery plugin
    # $1: driver = natacpi, tpacpi, tpsmapi
    local bm m mlist=""

    for bm in _bm_read _bm_thresh _bm_dischg; do
        if [ "$(eval echo \$$bm)" = "$1" ]; then
            # method matches driver
            m=""
            case $bm in
                _bm_read)   [ "$1" = "tpsmapi" ] && m="status" ;;
                _bm_thresh) m="charge thresholds" ;;
                _bm_dischg) m="recalibration" ;;
            esac
            if [ -n "$m" ]; then
                # concat method to output
                [ -n "$mlist" ] && mlist="${mlist}, "
                mlist="${mlist}${m}"
            fi
        fi
    done

    if [ -n "$mlist" ]; then
        printf "(%s)\n" "$mlist"
    else
        printf "(none)\n"
    fi

    return 0
}

print_batstate () {
    # print battery charging state with
    # an explanation when a threshold inhibits charging
    # $1: sysfile
    # global param: $_bm_thresh, $_syspwr
    local sysf val

    # check if bat state sysfile exists
    if [ -f "$1" ]; then
        sysf=$1
    else
        # sysfile non-existent
        printf "%-59s = (not available)\n" "$1"
        return 0
    fi

    if val=$(read_sysf "$sysf"); then
        # sysfile was readable, output state
        # map "Unknown" to "Idle" for clarity (and avoid user questions)
        [ "$val" = "Unknown" ] && val="Idle"
        printf "%-59s = %s\n" "$sysf" "$val"
    else
        # sysfile was not readable
        printf "%-59s = (not available)\n" "$sysf"
    fi

    return 0
}

print_battery_cycle_count () {
    # print battery cycle count, explain special case of 0
    # $1: sysfile
    # $2: cycle count
    case "$2" in
        0) printf "%-59s = %6d (or not supported)\n" "$1" "$2" ;;
        "")  printf "%-59s = (not supported)\n" "$1" ;;
        *)   printf "%-59s = %6d\n" "$1" "$2" ;;
    esac

    return 0
}

