#!/bin/sh
# tlb - adjust power settings
#
# Copyright (c) 2023 Alessio Molinari <levnikmyskin at github.com> and others.
# SPDX-License-Identifier: GPL-2.0-or-later

# --- Source libraries

for lib in @TLB_TLIB@/tlb-func-base @TLB_FLIB@/[0-9][0-9]*; do
    # shellcheck disable=SC1090
    . "$lib" || exit 70
done

# --- Constants

# --- Subroutines

show_usage () {
    echo "Usage: tlb chargeonce|discharge|setcharge|fullcharge|recalibrate" 1>&2
}

parse_args () { # parse command-line arguments
    # $@:       arguments to parse
    # retval:   $_cmd:  command;
    #           $_cmd2: subcommand;
    #           $_carg1,
    #           $_carg2,
    #           $_carg3: command arguments

    # parsing control: 'nil' means that the element is still expected
    _cmd="nil"
    _cmd2="nil"
    _carg1="nil"
    _carg2="nil"
    _carg3="nil"

    # iterate arguments until exhausted or delimiter '--' reached
    while [ $# -gt 0 ]; do
        if [ "$1" = "--" ]; then
            break;

        elif [ "$_cmd" = "nil" ]; then
            # command
            case "$1" in
                start)
                    # commands without further arguments
                    _cmd="$1"
                    _cmd2=""
                    _carg1=""
                    _carg2=""
                    _carg3=""
                    ;;
                chargeonce|discharge|fullcharge|recalibrate)
                    # commands with one or no arguments
                    _cmd="$1"
                    _cmd2=""
                    _carg2=""
                    _carg3=""
                    ;;

                setcharge)
                    # command with up to three arguments
                    _cmd="$1"
                    _cmd2=""
                    ;;

                init)
                    # command with subcommand and no arguments
                    _cmd="$1"
                    _carg1=""
                    _carg2=""
                    _carg3=""
                    ;;

                *)
                    # unknown command
                    echo "Error: unknown command \"$1\"."  1>&2
                    show_usage
                    do_exit 3
                    ;;
            esac

        elif [ "$_cmd2" = "nil" ]; then
            # subcommand
            case "$1" in
                start|stop|restart|force-reload)
                    _cmd2="$1"
                    ;;

                *) # unknown subcommand
                    echo "Usage: tlp init {start|stop|restart|force-reload}" >&2
                    do_exit 3
                    ;;
            esac

        elif [ "$_carg1" = "nil" ]; then
            # first command argument
            _carg1="$1"

        elif [ "$_carg2" = "nil" ]; then
            # second command argument
            _carg2="$1"

        elif [ "$_carg3" = "nil" ]; then
            # third command argument
            _carg3="$1"

        fi

        shift # next argument
    done # while arguments

    if  [ "$_cmd" = "nil" ]; then
        # no command parsed
        show_usage
        do_exit 3
    fi

    # clear missing arguments
    [ "$_carg1" = "nil" ] && _carg1=""
    [ "$_carg2" = "nil" ] && _carg2=""
    [ "$_carg3" = "nil" ] && _carg3=""

    return 0
}

# --- MAIN
# read configuration: quit on error, trace allowed
read_config 1 0

parse_args "$@"
parse_args4config "$@"

add_sbin2path

if [ -z "$_cmd2" ]; then
    echo_debug "run" "+++ $_cmd ($TLBVER) ++++++++++++++++++++++++++++++++++++++++"
else
    echo_debug "run" "+++ $_cmd $_cmd2 ($TLBVER) ++++++++++++++++++++++++++++++++++++++++"
fi

# shellcheck disable=SC2154
if [ -n "$_addpath" ]; then
    # shellcheck disable=SC2154
    echo_debug "path" "PATH=${_oldpath}[${_addpath}]"
else
    # shellcheck disable=SC2154
    echo_debug "path" "PATH=${_oldpath}"
fi
echo_debug "run" "SHELL=$(print_shell); umask=$(umask)"

# process command
exitcode=0

case "$_cmd" in
    init) # system initialization/shutdown: sysv, upstart, systemd, ...
        check_root
        # try to obtain lock (with timeout)
        locked=0
        if lock_tlb; then
            locked=1
        else
            echo "Failed to get lock, continuing anyway." 1>&2
        fi

        # do init business ...
        # shellcheck disable=SC2034
        _bgtask=1
        case "$_cmd2" in
            start)
                # apply battery settings
                echo -n "Setting battery charge thresholds..."
                set_charge_thresholds
                echo "done."
                ;;

            restart|force-reload)
                # apply battery settings
                echo -n "Setting battery charge thresholds..."
                set_charge_thresholds
                echo "done."
                ;;

            *)
                echo "Usage: tlb init {start|restart|force-reload}" >&2
                do_exit 3
                ;;
        esac

        save_runconf
        # unlock if necessary
        [ $locked -eq 0 ] || unlock_tlb
        ;;

    auto) # set mode depending on state (called by udev rule)
          # -- but only if not previously run for the same power state
          # rationale: filter out duplicate power_supply udev events
        check_root
        # shellcheck disable=SC2034
        _bgtask=1
        check_services_activation_status
        if lock_tlb_nb; then
            if compare_and_save_power_state "$pwrmode"; then
                if [ "$RESTORE_THRESHOLDS_ON_BAT" = "1" ] \
                    && [ "$pwrmode" = "1" ]; then
                    set_charge_thresholds
                fi
                save_runconf
            fi
            unlock_tlb
        fi
        ;;

    start) # set mode depending on state (interactive mode)
        check_services_activation_status
        check_root
        if lock_tlb; then
            set_charge_thresholds
            unlock_tlb
        else
            echo_tlb_locked
        fi
        ;;

    setcharge) # set charge thresholds (temporarily)
        check_root
        # quoting args will break $# in setcharge_battery()
        # shellcheck disable=SC2086
        setcharge_battery $_carg1 $_carg2 $_carg3
        exitcode=$?
        ;;

    fullcharge) # charge battery to 100% (temporarily)
        if check_ac_power fullcharge; then
            check_root
            # quoting args will break $# in setcharge_battery()
            # shellcheck disable=SC2086
            setcharge_battery DEF DEF $_carg1
            exitcode=$?
            if [ $exitcode -eq 0 ]; then
                echo "Charging starts now, keep AC connected."
            fi
        else
            exitcode=2
        fi
        ;;

    chargeonce) # charge battery to stop threshold once
        if check_ac_power chargeonce; then
            check_root
            # quoting args will break $# in chargeonce_battery()
            # shellcheck disable=SC2086
            chargeonce_battery $_carg1
            exitcode=$?
            if [ $exitcode -eq 0 ]; then
                echo "Charging starts now, keep AC connected."
            fi
        else
            exitcode=2
        fi
        ;;

    discharge) # discharge battery completely (to recalibrate)
        if check_ac_power discharge; then
            check_root
            if lock_tlb_nb tlb_discharge; then
                # quoting args will break $# in discharge_battery()
                # shellcheck disable=SC2086
                discharge_battery $_carg1
                exitcode=$?
            else
                echo_discharge_locked
            fi
        else
            exitcode=2
        fi
        ;;

    recalibrate) # recalibrate battery, i.e. discharge and charge to 100%
        if check_ac_power recalibrate; then
            check_root
            if lock_tlb_nb tlb_discharge; then
                if setcharge_battery DEF DEF "$_carg1" "/discharge/recalibrate"; then
                    sleep 1
                    # quoting args will break $# in discharge_battery()
                    # shellcheck disable=SC2086
                    discharge_battery $_carg1
                    exitcode=$?
                    if [ $exitcode -eq 0 ]; then
                        echo "Charging starts now, for a complete recalibration"
                        echo "keep AC connected until the battery is fully charged."
                    else
                        echo "Battery recalibration aborted."
                    fi
                fi
            else
                echo_discharge_locked
            fi
        else
            exitcode=2
        fi
        ;;

    noop) # Debug: no operation
        check_root
        select_batdrv
        batdrv_select_battery "DEF"
        save_runconf
        echo "Debug: no operation performed."
        ;;
esac

do_exit $exitcode
